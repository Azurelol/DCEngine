/******************************************************************************/
/*
  File:    XXXXXXModule.h
  Author:  Alejandro Hitti
  Date:    11/19/14
  Brief:   The XXXXXX Module handles the inspection of all the components
           inside of the selected object.

  All content Â© 2014-2015 DigiPen (USA) Corporation, all rights reserved.
*/
/******************************************************************************/

#pragma once

// Includes
//------------------------------------------------------------------------------
#include "BaseModule.h"

namespace Editor
{
  class XXXXXXModule : public BaseModule
  {
  public:
    // Gettor for the singleton instance
    static XXXXXXModule* GetInstance(void)
    {
      static XXXXXXModule instance;
      return &instance;
    }

    // ------------------------------------/
    //           Virtual functions
    // ------------------------------------/

    // Adding static functions to the virtual ones inherited from BaseModule
    // allow us to make a container of modules that are implemented as singletons
    virtual bool Initialize()           override { return XXXXXXModuleInitialize(); }
    virtual bool IsActive()             override { return XXXXXXModuleIsActive();   }
    virtual void SetActive(bool state)  override { XXXXXXModuleSetActive(state);    }
    virtual bool IsVisible()            override { return XXXXXXModuleIsVisible();  }
    virtual void SetVisible(bool state) override { XXXXXXModuleSetVisible(state);   }
    virtual void Update()               override { XXXXXXModuleUpdate();            }

  private:
    // Default Constructor, Copy Constructor, assignment operator and Destructor
    // declared and not implemented to ensure they can't be called (Singleton)
    XXXXXXModule(void)                              = default;
    XXXXXXModule(XXXXXXModule&)                  = delete;
    XXXXXXModule& operator=(const XXXXXXModule&) = delete;
    ~XXXXXXModule(void)                             = default;

    // ------------------------------------/
    //           Static functions
    // ------------------------------------/

    // Initializes the Module
    static bool XXXXXXModuleInitialize();
    // Checks if the module is currently active
    static bool XXXXXXModuleIsActive();
    // Sets the module active flag to the state passed in
    static void XXXXXXModuleSetActive(bool state);
    // Checks if the module is currently visible
    static bool XXXXXXModuleIsVisible();
    // Sets the module visible flag to the state passed in
    static void XXXXXXModuleSetVisible(bool state);
    // Updates the module
    static void XXXXXXModuleUpdate();

    // ------------------------------------/
    //           Private functions
    // ------------------------------------/

    // Inspects all the components from an entity
    static void Inspect(Core::Entity* entity);

    // ------------------------------------/
    //           Static variables
    // ------------------------------------/
    static bool m_IsActive;
    static bool m_IsVisible;
  };
}
