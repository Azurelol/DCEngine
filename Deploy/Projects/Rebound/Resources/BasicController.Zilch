class BasicController : ZilchComponent
{
	[Property]
	var JumpStrength : Real;

	[Property]
	var TopSpeed : Real;

	[Property]
	var Acceleration : Real;

	[Property]
	var DragFactor : Real;

	[Property]
	var DragDelay : Real;

	var DragTimer : Real;

    function Initialize()
    {
        Daisy.Connect(this.Space, DaisyEvent.LogicUpdate, this.OnLogicUpdate);
        Daisy.Connect(this.Owner, Events.JumpInput, this.OnJumpInput);
        Daisy.Connect(this.Owner, Events.MoveLeftInput, this.OnMoveLeftInput);
        Daisy.Connect(this.Owner, Events.MoveRightInput, this.OnMoveRightInput);

        this.DragTimer = 0.0;
    }

    function OnJumpInput(event : JumpInput)
    {
    	this.Owner.RigidBody.ApplyLinearVelocity(Real3(0, this.JumpStrength, 0));
    }

    function OnMoveLeftInput(event : MoveLeftInput)
    {
    	if(this.Owner.RigidBody.Velocity.X > 0)
    	{
    		this.Owner.RigidBody.ApplyLinearVelocity(Real3(-this.Acceleration/2, 0, 0));
    	}
    	if(this.Owner.RigidBody.Velocity.X > -this.TopSpeed)
    	{
    		this.Owner.RigidBody.ApplyLinearVelocity(Real3(-this.Acceleration, 0, 0));
    	}

    	this.DragTimer = this.DragDelay;

    }

    function OnMoveRightInput(event : MoveRightInput)
    {
    	if(this.Owner.RigidBody.Velocity.X < 0)
    	{
    		this.Owner.RigidBody.ApplyLinearVelocity(Real3(this.Acceleration/2, 0, 0));
    	}
    	if(this.Owner.RigidBody.Velocity.X < this.TopSpeed)
    	{
    		this.Owner.RigidBody.ApplyLinearVelocity(Real3(this.Acceleration, 0, 0));
    	}

    	this.DragTimer = this.DragDelay;
    }

    function OnLogicUpdate(event : LogicUpdate)
    {
    	if(this.DragFactor > 0 && this.DragTimer < 0)
    	{
    		Console.WriteLine("ReducingVelocity");
    		this.Owner.RigidBody.Velocity = Real3(this.Owner.RigidBody.Velocity.X/this.DragFactor,
    											  this.Owner.RigidBody.Velocity.Y, 0);
    	}
    	else if(this.DragFactor > 0)
    	{
    		Console.WriteLine("DragDelay");
    		this.DragTimer -= event.Dt;
    	}
    }
}
