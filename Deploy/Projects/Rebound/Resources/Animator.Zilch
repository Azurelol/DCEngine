class Animator : ZilchComponent
{

	[Property]
	var Distance : Real = 1;
	[Property]
	var MoveTime : Real = 0.5;
	[Property]
	var Ease : Ease = Ease.Linear;
	[Property]
	var LoopDelayTime : Real = 1;
	[Property]
	var IsHorizontal : Boolean = false;
	
	var IsRunning : Boolean = false;
	
    function Initialize()
    {
        Daisy.Connect(this.Space, DaisyEvent.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : LogicUpdate)
    {
		if(this.IsRunning == false)
		{
			var seq = Actions.Sequence(this.Owner.Actions);
			Actions.Property(seq, @this.IsRunning, true, 0, Ease.Linear);
			if(this.IsHorizontal == true)
			{
				Actions.Property(seq, @this.Owner.Transform.Translation, Real3(this.Owner.Transform.Translation.X + this.Distance, this.Owner.Transform.Translation.YZ), this.MoveTime, this.Ease);
			}
			else
			{
				Actions.Property(seq, @this.Owner.Transform.Translation, Real3(this.Owner.Transform.Translation.X, this.Owner.Transform.Translation.Y + this.Distance, this.Owner.Transform.Translation.Z), this.MoveTime, this.Ease);
			}
			
			Actions.Delay(seq, this.LoopDelayTime);
			if(this.IsHorizontal == true)
			{
				Actions.Property(seq, @this.Owner.Transform.Translation, Real3(this.Owner.Transform.Translation.X - this.Distance, this.Owner.Transform.Translation.Y, this.Owner.Transform.Translation.Z), this.MoveTime, this.Ease);
			}
			else
			{
				Actions.Property(seq, @this.Owner.Transform.Translation, Real3(this.Owner.Transform.Translation.X, this.Owner.Transform.Translation.Y - this.Distance, this.Owner.Transform.Translation.Z), this.MoveTime, this.Ease);
			}
			Actions.Delay(seq, this.LoopDelayTime);
			
			Actions.Property(seq, @this.IsRunning, false, 0, Ease.Linear);
			
		}
		
    }
}
