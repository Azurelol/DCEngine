enum AudioType { Bus, VCA }

class TestSoundInstance : ZilchComponent
{
	[Property] var Music : String = "";
	var Instance : SoundInstance;
	[Property] var Type : AudioType = AudioType.VCA;
	[Property] var TypeHandle : String = "";	

	var BusMuted : Boolean = false;
	var BusPaused : Boolean = false;

    function Initialize()
    {
        Daisy.Connect(Daisy.Keyboard, DaisyEvent.KeyDown, this.OnKeyDownEvent);
    }

    function OnKeyDownEvent(event : KeyDown) {

    	if (event.Key == Keys.S) {
    		this.PlaySound();
    	}
    	else if (event.Key == Keys.R) {
    		this.Resume();
    	}
    	else if (event.Key == Keys.P) {
    		this.Pause();
    	}
    	else if (event.Key == Keys.T) {
    		if (this.Type == AudioType.VCA)
    			this.SetVCALevel(0.0);
    		else if (this.Type == AudioType.VCA)
    			this.SetBusLevel(0.0);
    	}
    	else if (event.Key == Keys.Y) {
			if (this.Type == AudioType.VCA)
    			this.SetVCALevel(1.0);
    		else if (this.Type == AudioType.VCA)
    			this.SetBusLevel(1.0);
    	}
    	else if (event.Key == Keys.Add) {
    		if (this.Instance != null) this.Instance.InterpolateVolume(1,0);
    	}
    	else if (event.Key == Keys.Subtract) {
    		if (this.Instance != null) this.Instance.InterpolateVolume(0,0);
    	}
    }

    function PrintStatus() {
    }
    
    function PlaySound() {    	
    	this.Instance = this.Space.SoundSpace.PlayCue(this.Music);
    	if (this.Instance != null) Console.WriteLine("`this.Owner.Name` is playing `this.Instance.Name`");
    }

    function Pause() {
    	this.Instance.Pause();
    }

    function Resume() {
    	this.Instance.Resume();
    }
    // StopModes are "Immediate" and "Fade"
    function Terminate() {
    	Console.WriteLine("Terminating `this.Name`");
    	this.Instance.Stop(StopMode.Immediate);
    }

    function ShowBusMethods() {
    	var bus = Bus.Find(this.TypeHandle);
    }

    function SetBusLevel(level : Real) {
    	var bus = Bus.Find(this.TypeHandle);
    	if (bus != null) {    		
    		Console.WriteLine("Setting `this.TypeHandle` to `level`");
    		bus.FaderLevel = level;
    	}
    	else
    		Console.WriteLine("Could not find the Bus `this.TypeHandle`!");
    }

    function SetVCALevel(level : Real) {
    	var vca = VCA.Find(this.TypeHandle);
    	if (vca != null) {    		
    		Console.WriteLine("Setting `this.TypeHandle` to `level`");
    		vca.FaderLevel = level;
    	}
    	else
    		Console.WriteLine("Could not find the VCA `this.TypeHandle`!");
    }
}
