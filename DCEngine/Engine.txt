  
     // DEPRECATED: GAMESTATE //
      //GamestatePtr GetCurrentState() const;
      //void PushGamestate(GamestatePtr gamestate);
      //void PopGameState();

      // SPACE //
      SpacePtr CreateSpace(std::string name);
      SpacePtr GetSpace(std::string name);
      SpacePtr SetActiveSpace(std::string name);
      SpacePtr GetActiveSpace();
      std::string GetDefaultSpace() { return _defaultSpace; }
  
  /**************************************************************************/
  /*!
  \brief  Connects an observer to a subject's events by passing a function pointer.
          The engine will construct the delegate which it will pass to the subject.
  \param  entity The subject to which the observer wants to listen to.
  \param  event An enum. The specific event the observer wants to listen to.
  */
  /**************************************************************************/
  //void Engine::Connect(const Entity & entity, EventType eventType, function fn) {
  //  
  //}

  //void Engine::Disconnect(const Entity & entity, EventType eventType) {
  //}

  /**************************************************************************/
  /*!
  \brief  Gets the current gamesate.
  \return A pointer to the current gamestate.
  */
  /**************************************************************************/
  GamestatePtr Engine::GetCurrentState() const {
    auto currentState = _gamestates.top();
    std::cout << "Engine::GetCurrentState - The current state is "
              << currentState->_name << std::endl;
    return currentState;
  }

  /**************************************************************************/
  /*!
  \brief  Pushes the gamestate on top of the stack.
  */
  /**************************************************************************/
  void Engine::PushGamestate(GamestatePtr gamestate) {
    std::cout << "Engine::PushGameState - " << "Gamestate: "
      << gamestate->_name << std::endl;
    _gamestates.push(gamestate);
    gamestate->Initialize();
    //CreateSpace(gamestate->_def);
    
  }

  /**************************************************************************/
  /*!
  \brief  Pops the gamestate.
  */
  /**************************************************************************/
  void Engine::PopGameState() {
    auto currentState = _gamestates.top();
    EnumeratedGamestate gamestate = currentState->GetState();
    currentState->Terminate(); // Shuts down the current state.
    _gamestates.pop(); // Next, removes it from the stack.

    // If there is a gamestate left in the stack
    if (_gamestates.size()) 
      // Activate the new gamestate
      _gamestates.top()->PoppedTo(gamestate);
    // If there's no remaining gamestates, stop the engine.
    else 
      Stop();
  }

  /**************************************************************************/
  /*!
  \brief  Creates a space with the given name.
  \param  The name of the space.
  \return A pointer to the space.
  */
  /**************************************************************************/
  SpacePtr Engine::CreateSpace(std::string name) {
    std::cout << "Engine::CreateSpace - " << name << " has been created." << std::endl;

    // Check if the space already exists
    auto space = _spaces.find(name);

    // Checks if the space is a valid existing space??
    if (space != _spaces.end())
      return (*space).second;

    // If the space doesn't exist, creates it
    else
      _spaces.emplace(name, SpacePtr(new Space(name))); // See below:   
    return GetSpace(name);

    /* http://en.cppreference.com/w/cpp/container/unordered_map/emplace
    Inserts a new element into the container by constructing it in-place
    with the given args if there is no element with the key in the container.
    Careful use of emplace allows the new element to be constructed while
    avoiding unnecessary copy or move operations. The constructor of the new
    element (i.e. std::pair<const Key, T>) is called with exactly the same arguments
    as supplied to emplace, forwarded via std::forward<Args>(args)....

    If rehashing occurs due to the insertion, all iterators are invalidated.
    Otherwise iterators are not affected. References are not invalidated.
    Rehashing occurs only if the new number of elements is equal to or greater
    than max_load_factor()*bucket_count().
    */

  }

  /**************************************************************************/
  /*!
  \brief  Returns a pointer to the space.
  \param  The name of the space.
  \return A pointer to the space.
  */
  /**************************************************************************/
  SpacePtr Engine::GetSpace(std::string name) {
    // Searches for a space with the specified name
    SpaceMap::iterator it = _spaces.find(name);

    // Check if the space was found
    if (it != _spaces.end())
      return it->second;

    /*
    Dereferencing a std::map iterator gives you a std::pair,
    you can then access its elements with first and second. For example, (*it).first
    will give you the key and (*it).second will give you the value.
    These are equivalent to it->first and it->second.
    */

    // Good Cop: If there was no space with that name, creates one and gives it to you.
    //return CreateSpace(name);
    // Bad Cop:  Throw a range error cuz you done goof'd
    throw std::range_error("The specified space does not exist.");
  }

  /**************************************************************************/
  /*!
  \brief  Sets the active space.
  \param  The name of the space.
  \return A pointer to the space.
  */
  /**************************************************************************/
  SpacePtr Engine::SetActiveSpace(std::string name) {

    // Makes sure the space exists
    auto space = _spaces.find(name);
    if (space != _spaces.end()) {
      _activeSpace = name;
      std::cout << "Engine::SetActiveSpace - " << name 
                << " has been set as the active space." << std::endl;
      return GetActiveSpace();
    }

    // If the space didn't exist, throw the doge at the client.
    throw std::range_error("Tried to set an active space to a space that doesn't exist.");

  }

  /**************************************************************************/
  /*!
  \brief  Returns a pointer to the active space.
  \return A pointer to the space.
  */
  /**************************************************************************/
  SpacePtr Engine::GetActiveSpace() {
    auto activeSpace = _spaces.find(_activeSpace);
    return activeSpace->second;
  }