class ZPlayerController : ZilchComponent
{
    //sends ToggleEvent : ToggleEvent;
    
    [Property]
    var MoveSpeed : Real = 0.35;
    [Property]
    var JumpPower : Real = 8.0;
    [Property]
    var JumpFrames : Real = 1.0;
    [Property]
    var Health : Real = 10.0;
    [Property]
    var AirBrakeScalar : Real = 0.95;
    [Property]
    var TurnSpeedScalar : Real = 5.0;
    [Property]
    var DoAutoPlay : Boolean = true;
    [Property]
    var StandAnimation : String = "Char_Asha_Idle_Spritesheet";
    [Property]
    var JumpAnimation : String = "Char_Asha_Jump_Spritesheet";
    [Property]
    var RunAnimation : String = "Char_Asha_Run_Spritesheet";
    [Property]
    var AutoPlayTimer : Real = 2.0;
	[Property]
	var JumpSound : String = "Jump";
	[Property]
	var LandSound : String = "Land";
	[Property]
	var TakeDamageSound : String = "Collide";
    [Property]
	var FootstepSound : String = "Step";
	[Property]
	var FootstepSoundEnabled : Boolean = false;
	
	var Grounded : Boolean = true;
	var Jumping : Boolean = false;
	var Invincible : Boolean = false;
	var LevelCheatLoaded : Boolean = false;
	var Musicplay : Boolean = false;
	var Dead : Boolean = false;
	var DeathTimer : Real = 0.0;
	var TimeToDie : Real = 0.7;
	var FramesOfDamageColor : Real = 10.0;
	var FramesOfDamageColorApplied : Real = 0.0;
    var JumpFramesApplied : Real = 0.0;
    var VelocityXCap : Real = 30.0;
    var GroundFriction : Real = 0.2;

    var TransformRef : Transform = null;
    var RigidBodyRef : RigidBody = null;
    var ColliderRef : BoxCollider = null;

	var SpriteComponent : Sprite = null;
	
    function Initialize()
    {
    	//SEND INIT EVENT FOR CAMERA REFERENCE
        var ev = PlayerBroadcastEvent();
        ev.Player = this.Owner;
        this.Space.Dispatch("PlayerBroadcastEvert", ev);


		Daisy.Connect(Daisy.Mouse, DaisyEvent.MouseDown, this.OnMouseDownEvent);
		Daisy.Connect(Daisy.Mouse, DaisyEvent.MouseUp, this.OnMouseDownEvent);
        Daisy.Connect(Daisy.Keyboard, DaisyEvent.KeyDown, this.OnKeyDownEvent);
        Daisy.Connect(this.Owner, DaisyEvent.CollisionStarted, this.OnCollisionStartedEvent);
        Daisy.Connect(this.Owner, DaisyEvent.CollisionEnded, this.OnCollisionEndedEvent);
        Daisy.Connect(this.Owner, DaisyEvent.CollisionPersisted, this.OnCollisionPersistedEvent);
        Daisy.Connect(this.Space, DaisyEvent.LogicUpdate, this.OnLogicUpdateEvent);
		
		this.TransformRef = this.Owner.Transform;
		this.RigidBodyRef = this.Owner.RigidBody;
		this.ColliderRef = this.Owner.BoxCollider;
		this.SpriteComponent = this.Owner.Sprite;
		
		
    }
    
    function OnMouseDownEvent(event : MouseDown)
    {

    }

    function OnMouseUpEvent(event : MouseDown)
    {

    }

    function OnKeyDownEvent(event : KeyDown)
    {
        if(event.Key == Keys.Tilde)
        {
            this.LevelCheatLoaded = false;
        }
		if(this.LevelCheatLoaded == true)
		{
			return;
		}
		
		var level : String = "";
		if(event.Key == Keys.I)
		{
			this.Invincible = !this.Invincible;
			if(this.Invincible)
			{
				this.SpriteComponent.Color = Real4(1, 1, 0, 1);
			}
			else
			{
				this.SpriteComponent.Color = Real4(1, 1, 1, 1);
			}
		}
		if(event.Key == Keys.U)
		{
			this.DoAutoPlay = !this.DoAutoPlay;
			if(!this.DoAutoPlay)
			{
				this.SpriteComponent.Color = Real4(0, 0.5, 0, 1);
			}
			else
			{
				this.SpriteComponent.Color = Real4(1, 1, 1, 1);
			}
		}
		if(event.Key == Keys.O)
		{
			this.LevelCheatLoaded = true;
			this.Die();
		}
		if(event.Key == Keys.P)
		{
			this.LevelCheatLoaded = true;
			level = "YouWon";
			this.Space.LoadLevel(level);
		}
		if(event.Key == Keys.L)
		{
		
			this.LevelCheatLoaded = false;
		}
		if(event.Key == Keys.Num1)
		{
			this.LevelCheatLoaded = true;
			level = "Level1";
			this.Space.LoadLevel(level);
		}
		if(event.Key == Keys.Num2)
		{
			this.LevelCheatLoaded = true;
			level = "Level2";
			this.Space.LoadLevel(level);
		}
		if(event.Key == Keys.Num3)
		{
			this.LevelCheatLoaded = true;
			level = "Level3";
			
			//LOAD NEW LEVEL (level)
		}
		
    }

    function OnCollisionStartedEvent(event : CollisionStarted)
    {
		if(event.OtherObject.Transform.Translation.Y + event.OtherObject.Transform.Scale.Y /2 
		< this.TransformRef.Translation.Y)
		{
			this.Grounded == true;
			//auto particle = SpaceRef->CreateObject("LandingParticle");
			//if (particle)
			//{
			//	particle->getComponent<Components::Transform>()->setTranslation(TransformRef->Translation - Vec3(0, TransformRef->getScale().Y / 2, 0));
			//}
			//if(event.OtherObject.LeveManager)
			//{
				//if(event.OtherObject.Fade)
				//{
					//event.OtherObject.Fade.setFading(true);
				//}
			//}
		}
    }

    function OnCollisionEndedEvent(event : CollisionEnded)
    {

    }

	function OnCollisionPersistedEvent(event : CollisionPersisted)
    {


    }

	function OnLogicUpdateEvent(event : LogicUpdate)
    {
    	//Console.WriteLine("Hi");
		this.CheckForGround();
		if(this.RigidBodyRef.Velocity.X > this.VelocityXCap)
		{
			var currentVel = this.RigidBodyRef.Velocity;
			currentVel.X = this.VelocityXCap;
			this.RigidBodyRef.Velocity = currentVel;
		}
		else if(this.RigidBodyRef.Velocity.X < -this.VelocityXCap)
		{
			var currentVel = this.RigidBodyRef.Velocity;
			currentVel.X = -this.VelocityXCap;
			this.RigidBodyRef.Velocity = currentVel;
		}
		
		if(this.Dead)
		{
			this.DeathTimer += event.Dt;
			if(this.DeathTimer > this.TimeToDie)
			{
				this.Dead = false;
				this.Space.ReloadLevel();
			}
			return;
		}
		if(this.SpriteComponent.Color == Real4(1, 0, 0, 1))
		{
			if(this.FramesOfDamageColorApplied < this.FramesOfDamageColor)
			{
				this.FramesOfDamageColorApplied = this.FramesOfDamageColorApplied + 1;
			}
			else
			{
				this.FramesOfDamageColorApplied = 0;
				this.SpriteComponent.Color = Real4(1, 1, 1, 1);
			}
		}
		if(this.DoAutoPlay == true)
		{
			this.AutoPlayTimer += event.Dt;
			this.AutoPlay(event);
		}
		if(this.Grounded == false)
		{
			this.SpriteComponent.SpriteSource = this.JumpAnimation;
			this.RigidBodyRef.Velocity = this.RigidBodyRef.Velocity * Real3(0.96, 0.99, 1);
		}
		if(Daisy.Keyboard.KeyIsDown(Keys.W) || Daisy.Keyboard.KeyIsDown(Keys.Space))
		{
			if(this.Grounded)
			{
				var sequence = Actions.Sequence(this.Owner.Actions);
				Actions.Delay(sequence, 0.1);
				Actions.Call(sequence, this.Jump);
				this.Jumping = true;
				this.Grounded = false;
			}
		}
		else
		{
			this.Jumping = false;
			if(this.RigidBodyRef.Velocity.Y > 0)
			{
				this.RigidBodyRef.Velocity = this.RigidBodyRef.Velocity * Real3(1, this.AirBrakeScalar, 1);
			}
			
		}
		if(Daisy.Keyboard.KeyIsDown(Keys.A))
		{
			this.SpriteComponent.FlipX = true;
			this.MoveLeft();
			//var mat = Daisy.Content.GetPhysicsMaterial(ColliderRef.GetPhysicsMaterial());
			//mat.SetFriction(this.GroundFriction);
			if(this.Grounded)
			{
				this.SpriteComponent.SpriteSource = this.RunAnimation;
				
			}
		}
		else if(Daisy.Keyboard.KeyIsDown(Keys.D))
		{
			this.SpriteComponent.FlipX = false;
			this.MoveRight();
			//var mat = Daisy.Content.GetPhysicsMaterial(ColliderRef.GetPhysicsMaterial());
			//mat.SetFriction(this.GroundFriction);
			if(this.Grounded)
			{
				this.SpriteComponent.SpriteSource = this.RunAnimation;
			}
		}
		else
		{
			//var mat = Daisy.Content.GetPhysicsMaterial(ColliderRef.GetPhysicsMaterial());
			//mat.SetFriction(1.3);//MAGIC NUMBER!!
			if(this.Grounded)
			{
				this.SpriteComponent.SpriteSource = this.RunAnimation;				
			}
		}
	}

	function Jump()
	{
		this.JumpFramesApplied == this.JumpFramesApplied + 1;
		this.RigidBodyRef.Velocity = this.RigidBodyRef.Velocity + Real3(0, this.JumpPower, 0);
		if(this.JumpFramesApplied >= this.JumpFrames)
		{
			this.Jumping = false;
			this.JumpFramesApplied = 0;
		}
		
	}
	
	function TakeDamage(damage : Real)
	{
		if(this.Invincible)
		{
			return;
		}
		this.SpriteComponent.Color = Real4(1, 0, 0, 1);
		this.Health = this.Health - damage;
		//this.Space.SoundSpace.PlayCue("Hit");
		
		if(this.Health <= 0)
		{
			this.Die();
		}
	}

	function Die()
	{
		this.SpriteComponent.Color = Real4(0, 0, 0, 1);
		this.Dead = true;
		var cameraRef = this.Space.FindObjectByName("Camera");
		//this.Space.SoundSpace.PlayCue("Death");
		if (cameraRef != null)
		{
			//cameraRef.CameraController.DoScreenShake = true;
		}
	}

	function CheckForGround()
	{
		//Console.WriteLine("Checking ~");
		var filter : CastFilter = CastFilter();
		filter.CollisionGroup = CollisionGroup.Find("Terrain");
		filter.Include = true;
		var physicsSpace = this.Space.PhysicsSpace;
		var ray = Ray();
		ray.Direction = Real3(0, -1, 0);
		ray.Origin = Real3(this.TransformRef.Translation.X, this.TransformRef.Translation.Y, this.TransformRef.Translation.Z) 
						   + Real3(this.TransformRef.Scale.X / 2.01, -this.TransformRef.Scale.Y / 2, 0);
		var result = physicsSpace.CastRay(ray);
		if(result.Distance < 0.05)
		{
			this.Grounded = true;
			return;
		}
		ray.Origin = Real3(this.TransformRef.Translation.X, this.TransformRef.Translation.Y, this.TransformRef.Translation.Z) 
				 		+ Real3(0, -this.TransformRef.Scale.Y / 2, 0);
		result = physicsSpace.CastRay(ray, filter);
		if(result.Distance < 0.05)
		{
			this.Grounded = true;
			return;
		}
		ray.Origin = Real3(this.TransformRef.Translation.X, this.TransformRef.Translation.Y, this.TransformRef.Translation.Z) 
							+ Real3(-this.TransformRef.Scale.X / 2.01, -this.TransformRef.Scale.Y / 2, 0);
		result = physicsSpace.CastRay(ray, filter);
		if(result.Distance < 0.05)
		{
			this.Grounded = true;
			return;
		}
		this.Grounded = false;
		
		Console.WriteLine("Checking ground!");

	}
	
    function AutoPlay(event : LogicUpdate)
	{

    }
	
	function MoveLeft()
	{
		var scalar = 0.0;
		
		if(this.RigidBodyRef.Velocity.X > 0)
		{
			scalar = this.TurnSpeedScalar;
		}
		else
		{
			scalar = 1;
		}
		if(this.RigidBodyRef.Velocity.X*this.RigidBodyRef.Velocity.X + this.RigidBodyRef.Velocity.Y*this.RigidBodyRef.Velocity.Y < 49.0)
		{
			this.RigidBodyRef.ApplyLinearVelocity(Real3(-this.MoveSpeed * scalar * 2.0, 0, 0));
		}
		else
		{
			this.RigidBodyRef.ApplyLinearVelocity(Real3(-this.MoveSpeed * scalar, 0, 0));
		}
	}
	
	function MoveRight()
	{
		var scalar = 0.0;
		
		if(this.RigidBodyRef.Velocity.X > 0)
		{
			scalar = this.TurnSpeedScalar;
		}
		else
		{
			scalar = 1;
		}
		if(this.RigidBodyRef.Velocity.X*this.RigidBodyRef.Velocity.X + this.RigidBodyRef.Velocity.Y*this.RigidBodyRef.Velocity.Y < 49.0)
		{
			this.RigidBodyRef.ApplyLinearVelocity(Real3(this.MoveSpeed * scalar * 2.0, 0, 0));
		}
		else
		{
			this.RigidBodyRef.ApplyLinearVelocity(Real3(this.MoveSpeed * scalar, 0, 0));
		}
	}


}
