// Used to notify the UIManager component of state changes on its buttons
class UIButtonEvent : ZilchEvent
{
    // Button that underwent a state change
    var Button : Entity = null;
    
    // The current state of the button
    var State : ButtonState = ButtonState.Default;
	
	sends UIButtonEvent : UIButtonEvent;
}

class UIButton : ZilchComponent
{
	
    // Should theis component be active?
    [Property]
    var Active : Boolean = true;
    
    // State colors
    [Property]
    var DefaultColor : Real4 = Real4(1,1,1,1);
    
    [Property]
    var HoveredColor : Real4 = Real4(1,1,1,1);
    
    [Property]
    var ClickedColor : Real4 = Real4(1,1,1,1);
    
    [Property]
    var InactiveColor : Real4 = Real4(1,1,1,1);
    
	[Property]
    var TextReferenceName : String = "";

    [Property]
    var NormalScale : Real2 = Real2(8.0, 1.5);

    [Property]
    var ExpansionScale : Real = 1.0;

    [Property]
    var ExpansionTime : Real;
    /*
    // State SoundCue resources
    [Property]
    var DefaultSound : SoundCue = null;
    
    [Property]
    var HoverSound : SoundCue = null;
    
    [Property]
    var ClickedSound : SoundCue = null;
    */
    // Current Stae of the button
    var CurState : ButtonState = ButtonState.Default;

    var TextReference : Entity = null;

    
	
    function Initialize()
	{
        Daisy.Connect(this.Owner, DaisyEvent.MouseEnter, this.OnMouseEnter);
		Daisy.Connect(this.Owner, DaisyEvent.MouseExit, this.OnMouseExit);
		Daisy.Connect(this.Owner, DaisyEvent.ToggleEvent, this.OnToggleEvent);
		Daisy.Connect(Daisy.Mouse, DaisyEvent.MouseDown, this.OnMouseDown);

		if(this.TextReferenceName != "")
		{
			this.TextReference = this.Space.FindObjectByName(this.TextReferenceName);
		}

		if(this.Active)
		{
			this.EnterDefaultState();
		}
		else
		{
			this.EnterInactiveState();
		}
    }
	
	function OnMouseEnter(event : MouseEnter)
	{
		if(this.Active)
		{
			this.EnterHoveredState();
		}
		
	}
	
	function OnMouseExit(event : MouseExit)
	{
		if(this.Active)
		{
			this.EnterDefaultState();
		}
	}

	function OnMouseDown(event : MouseDown)
	{
		if(this.CurState == ButtonState.Hovered)
		{
			this.EnterClickedState();
		}
	}

	function OnToggleEvent(event : ToggleEvent)
	{
		if(this.CurState == ButtonState.Inactive)
		{
			this.EnterDefaultState();
		}
		else
		{
			this.EnterInactiveState();
		}
	}

	function EnterDefaultState()
	{
		this.Active = true;
		this.CurState = ButtonState.Default;
		this.Owner.Sprite.Color = this.DefaultColor;

		if(this.TextReference != null)
		{
			this.TextReference.SpriteText.Color = Real4(this.TextReference.SpriteText.Color.XYZ, 0.5);
		}

		this.Shrink();
		this.ReportState();
	}

	function EnterHoveredState()
	{
		this.CurState = ButtonState.Hovered;
		this.Owner.Sprite.Color = this.HoveredColor;

		if(this.TextReference != null)
		{
			this.TextReference.SpriteText.Color = Real4(this.TextReference.SpriteText.Color.XYZ, 0.75);
		}

		//this.Space.SoundSpace.PlayCue(this.HoveredSound);
		this.Expand();
		this.ReportState();
	}

	function EnterClickedState()
	{
		this.CurState = ButtonState.Clicked;
		this.Owner.Sprite.Color = this.ClickedColor;

		if(this.TextReference != null)
		{
			this.TextReference.SpriteText.Color = Real4(this.TextReference.SpriteText.Color.XYZ, 1.0);
		}

		//this.Space.SoundSpace.PlayCue(this.ClickedSound);
		this.ReportState();
	}

	function EnterInactiveState()
	{
		this.Active = false;
		this.CurState = ButtonState.Inactive;
		this.Owner.Sprite.Color = this.InactiveColor;

		if(this.TextReference != null)
		{
			this.TextReference.SpriteText.Color = Real4(this.TextReference.SpriteText.Color.XYZ, 0.25);
		}

		this.ReportState();
	}

	function ReportState()
	{
		var buttonEvent = UIButtonEvent();
		buttonEvent.Button = this.Owner;
		buttonEvent.State = this.CurState;
		if(this.Owner.Parent != null)
		{
			this.Owner.Parent.Dispatch(DaisyEvent.UIButtonEvent, buttonEvent);
		}
	}

	function Expand()
	{
		var exSeq = Actions.Sequence(this.Owner.Actions);

		Actions.Property(exSeq, @this.Owner.Transform.Scale, this.Owner.Transform.Scale * this.ExpansionScale, this.ExpansionTime, Ease.QuadOut);
	}

	function Shrink()
	{
		var shrSeq = Actions.Sequence(this.Owner.Actions);

		Actions.Property(shrSeq, @this.Owner.Transform.Scale, this.NormalScale, this.ExpansionTime, Ease.QuadOut);
	}
    
}

enum ButtonState {Default, Hovered, Clicked, Inactive}