/********************************************************************************
Author: John C. Myres 
All content Â© 2016 DigiPen (USA) Corporation, all rights reserved.

PUT THIS ON THE CAMERA!
********************************************************************************/
class LevelTimeFade : ZilchComponent
{
    var FadeObject : Entity = null;
	
	[Property]
	var FadeArchetypeName : String = "";
	
    //[Property]
    //var FadeSound : SoundCue = SoundCue.Fade;
	
    /* Initialize a property that holds a specified value. This value corresponds to the amount of time in seconds that the level will wait
    before automatically loading the next level.*/
    [Property]
    var TimeUntilLoad : Real = 0.0;
    
    // Initialize a property that holds a specified string. This string will specify the name of the level loaded when the timer is up.
    [Property]
    var LevelToLoad : String = "";
    
    [Property]
    var LevelToSkipTo : String = "";
    
    [Property]
    var UnskippableTime : Real = 0.0;
    
    [Property]
    var FadeDuration : Real = 0.5;
    
    [Property]
    var OnlyFadeIn : Boolean = false;
    
    var FadeStarted : Boolean;
    
    function Initialize()
    {
        if(!this.OnlyFadeIn)
        {
            // Listen for logic updates, calling the OnLogicUpdate function every frame.
            Daisy.Connect(this.Space, DaisyEvent.LogicUpdate, this.OnLogicUpdate);
            // Listen for Mouse Presses, calling the ClickSkip function when heard.
            Daisy.Connect(Daisy.Mouse, DaisyEvent.MouseDown, this.ClickSkip);
            Daisy.Connect(Daisy.Keyboard, DaisyEvent.KeyDown, this.OnKeyDown);
        }
        
        
        this.FadeIn();
        
        this.FadeStarted = false;
    }
    
    function FadeIn()
    {
		if(this.FadeObject == null)
		{
			this.FadeObject = this.Space.CreateAtPosition(this.FadeArchetypeName, this.Owner.Transform.Translation - Real3(0,0,0.1));
		}
        
        // Initialize an action sequence
        var fadeSeq = Actions.Sequence(this.Owner.Actions);
        
        // Over the course of 0.5 seconds, set the fade object to smoothly fade from black.
        Actions.Property(fadeSeq, @this.FadeObject.Sprite.Color, Real4(0, 0, 0, 0.0), this.FadeDuration, Ease.QuadIn);
    }

    function OnLogicUpdate(event : LogicUpdate)
    {
        // Every frame:
       
        // Subtract the time difference from this frame to the previous frame from TimeUntilLoad.
        this.TimeUntilLoad -= event.Dt;
        
        this.UnskippableTime -= event.Dt;
        
        // Then check if TimeUntilLoad is less than or equal to zero, meaning that the timer is up.
        if(this.TimeUntilLoad <= 0.0 && this.FadeStarted == false)
        {
            // If it is, load the level with the name specified by LevelToLoad.
            this.FadeOut();
        }
    }

    function OnKeyDown(event : KeyDown)
    {
    	if(this.UnskippableTime > 0.0)
    	{
    		return;
    	}

    	if(event.Key == Keys.Space || event.Key == Keys.Return || event.Key == Keys.Escape)
    	{
    		this.SkipToMain();
    	}
    }
    
    function ClickSkip(event : MouseDown)
    {
    	if(this.UnskippableTime > 0.0)
    	{
    		return;
    	}

        // Call the Load New Level function
        this.SkipToMain();
    }
    
    function LoadNewLevel()
    {
        // Load the level specified in the LevelToLoad property
        this.Space.LoadLevel(this.LevelToLoad);
    }
    
    function FadeOut()
    {
        this.FadeStarted = true;
        // Initialize an action sequence
        var fadeSeq = Actions.Sequence(this.Owner.Actions);
        
        // First: Over the course of 0.5 seconds, set the owner to smoothly fade to black.
        Actions.Property(fadeSeq, @this.FadeObject.Sprite.Color, Real4(0, 0, 0, 1.0), this.FadeDuration, Ease.QuadIn);
        
        Actions.Call(fadeSeq, this.LoadNewLevel);
    }
    
    function SkipToMain()
    {
        this.LevelToLoad = this.LevelToSkipTo;
        
        this.FadeOut();
    }
}
