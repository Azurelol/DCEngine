class FadeToColorZilch : ZilchComponent
{
    sends ToggleColorEvent : ToggleColorEvent;
    
    var RandomGenerator : Random;
    
    [Property]
    var Oscillate : Boolean = false;
    [Property]
    var CurrentlyFading : Boolean = false;
    [Property]
    var TargetColor : Real4;
    var StartingColor : Real4;
    [Property]
    var MinFadeTime: Real = 1;
    [Property]
    var MaxFadeTime: Real = 1;
    [Property]
    var MinDelay: Real = 0; 
    [Property]
    var MaxDelay: Real = 0; 
     
    function Initialize()
    {
        this.RandomGenerator= new Random();
        Daisy.Connect(this.Owner, DaisyEvent.ToggleColorEvent, this.OnToggleColorEvent);
        this.StartingColor = this.Owner.Sprite.Color;
        if(this.CurrentlyFading)
        {
            Actions.Call(this.Owner.Actions, this.SendSelfToggleColorEvent);
        }
    }

    function OnLogicUpdate(event : LogicUpdate)
    {
    }
    
    function OnToggleColorEvent(event : ToggleColorEvent)
    {
        var fadeTime = this.RandomGenerator.Range(this.MinFadeTime, this.MaxFadeTime);
        var delay = this.RandomGenerator.Range(this.MinDelay, this.MaxDelay);
        var seq = Actions.Sequence(this.Owner.Actions);
        Actions.Delay(seq, delay);
        Actions.Property(seq, @this.Owner.Sprite.Color, this.TargetColor, fadeTime, Ease.Linear);
        var temp = this.TargetColor;
        this.TargetColor = this.StartingColor;
        this.StartingColor = temp;
        if(this.Oscillate)
        {
            Actions.Call(seq, this.SendSelfToggleColorEvent);
        }
    }
    
    function SendSelfToggleColorEvent()
    {
        var ev = ToggleColorEvent();
        this.Owner.Dispatch("ToggleColorEvent", ev);

    }
}