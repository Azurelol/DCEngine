class AnimEvent : ZilchEvent
{
    sends AnimEvent : AnimEvent;
}

class SimpleAnimator : ZilchComponent
{
    [Property]
    var AnimateOnInitialize : Boolean = false;
    // How long should system wait before acting?
    [Property]
    var SystemDelay : Real = 0.0;
    
    [Property]
    var LoopSystem : Boolean = false;
	
    // Transparency changes
	[Property]
	var UseFadeIn : Boolean = false;
	
	[Property]
	var UseFadeOut : Boolean = false;
	
    [Property]
    var FadeSpeed : Real = 0.0;
    
    [Property]
    var FadeEase : Ease = Ease.Linear;
    
    // Translation changes
    [Property]
    var MoveIterations : Integer = 0;

    var TimesMoved : Integer;
    
    [Property]
    var MoveX : Real = 0.0;
    
    [Property]
    var MoveY : Real = 0.0;
    
    [Property]
    var MoveDelay : Real = 0.0;
    
    [Property]
    var MoveSpeed : Real = 0.0;
    
    [Property]
    var MoveEase : Ease = Ease.Linear;
    
    // Scale changes
    [Property]
    var ScaleIterations : Integer = 0;

    var TimesScaled : Integer = 0;
    
    [Property]
    var ScaleRatio : Real = 1.0;
    
    [Property]
    var ScaleDelay : Real = 0.0;
    
    [Property]
    var ScaleSpeed : Real = 0.0;
    
    [Property]
    var ScaleEase : Ease = Ease.Linear;

    var StartPos : Real3;

    var StartScale : Real3;

    var AnimStep : Integer;
    
    function Initialize()
    {
        Daisy.Connect(this.Owner, Events.AnimEvent, this.OnAnimEvent);

        this.StartPos = this.Owner.Transform.Translation;
        this.StartScale = this.Owner.Transform.Scale;
        this.TimesScaled = 0;
        this.TimesMoved = 0;
        this.AnimStep = 0;

        if(this.AnimateOnInitialize)
        {
            var masterSeq = Actions.Sequence(this.Owner.Actions);
    		Actions.Delay(masterSeq, this.SystemDelay);
        	Actions.Call(masterSeq, this.AnimateByStep);
        }
    }

    function OnAnimEvent(event : AnimEvent)
    {
    	var masterSeq = Actions.Sequence(this.Owner.Actions);
    	Actions.Delay(masterSeq, this.SystemDelay);
        Actions.Call(masterSeq, this.AnimateByStep);
    }

    function AnimateByStep()
    {
    	Console.WriteLine("Animating at `this.AnimStep`");
    	if(this.AnimStep == 0)
    	{
    		this.FadeIn();
    	}
    	else if(this.AnimStep == 1)
    	{
    		this.PerformMove();
    	}
    	else if(this.AnimStep == 2)
    	{
    		this.PerformScale();
    	}
    	else if(this.AnimStep == 3)
    	{
    		this.FadeOut();
    	}
    	else if(this.LoopSystem)
    	{
    		this.AnimStep = 0;
    		this.AnimateByStep();
    	}
    	/*OLD LOGIC, USES ACTION GROUPS*/ 
    	/*
        var masterSeq = Actions.Sequence(this.Owner.Actions);
        var masterGrp = Actions.Group(this.Owner.Actions);
        
        Actions.Delay(masterSeq, this.SystemDelay);
        Actions.Delay(masterGrp, this.SystemDelay);
        
		if(this.UseFadeIn)
		{
			Actions.Call(masterSeq, this.FadeIn);
			Actions.Delay(masterGrp, this.FadeSpeed);
		}
		
		Actions.Delay(masterSeq, this.FadeSpeed + (this.ScaleSpeed * this.ScaleIterations * 2) + (this.MoveSpeed * this.MoveIterations * 2));
		
        Actions.Call(masterGrp, this.PerformScale);
        Actions.Call(masterGrp, this.PerformMove);
        
		if(this.UseFadeOut)
		{
			Actions.Call(masterSeq, this.FadeOut);
		}
        
        if(this.LoopSystem)
        {
            Actions.Call(masterSeq, this.StartAnimation);
        }
        */

        /*NEW LOGIC, NO GROUPS*/
        /*
        var masterSeq = Actions.Sequence(this.Owner.Actions);
        
        Actions.Delay(masterSeq, this.SystemDelay);
        
		if(this.UseFadeIn)
		{
			Actions.Call(masterSeq, this.FadeIn);
		}
		
        Actions.Call(masterSeq, this.PerformScale);
        Actions.Call(masterSeq, this.PerformMove);
        
		if(this.UseFadeOut)
		{
			Actions.Call(masterSeq, this.FadeOut);
		}
        
        if(this.LoopSystem)
        {
            Actions.Call(masterSeq, this.StartAnimation);
        }
        */
    }
    
    function FadeIn()
    {
        var fadeSeq = Actions.Sequence(this.Owner.Actions);
        
        if(this.Owner.Sprite != null && this.UseFadeIn)
        {
            Actions.Property(fadeSeq, @this.Owner.Sprite.Color, Real4(this.Owner.Sprite.Color.XYZ, 1.0), this.FadeSpeed, this.FadeEase);
        }
        
        if(this.Owner.SpriteText != null && this.UseFadeIn)
        {
            Actions.Property(fadeSeq, @this.Owner.SpriteText.Color, Real4(this.Owner.SpriteText.Color.XYZ, 1.0), this.FadeSpeed, this.FadeEase);
        }

        ++this.AnimStep;
        Actions.Call(fadeSeq, this.AnimateByStep);
    }
    
    function FadeOut()
    {
        var fadeSeq = Actions.Sequence(this.Owner.Actions);
        
        if(this.Owner.Sprite != null && this.UseFadeOut)
        {
            Actions.Property(fadeSeq, @this.Owner.Sprite.Color, Real4(this.Owner.Sprite.Color.XYZ, 0.0), this.FadeSpeed, this.FadeEase);
        }
        
        if(this.Owner.SpriteText != null && this.UseFadeOut)
        {
            Actions.Property(fadeSeq, @this.Owner.SpriteText.Color, Real4(this.Owner.SpriteText.Color.XYZ, 0.0), this.FadeSpeed, this.FadeEase);
        }

        ++this.AnimStep;
        Actions.Call(fadeSeq, this.AnimateByStep);
    }
    
    function PerformScale()
    {
        if(this.TimesScaled < this.ScaleIterations)
        {
        	this.ScaleUp();
        }
        else
        {
        	this.TimesScaled = 0;
        	++this.AnimStep;
        	this.AnimateByStep();
        }
    }
    
    function PerformMove()
    {
        if(this.TimesMoved < this.MoveIterations)
        {
        	this.MoveTo();
        }
        else
        {
        	this.TimesMoved = 0;
        	++this.AnimStep;
        	this.AnimateByStep();
        }
    }
    
    function ScaleUp()
    {
        var scaleSeq = Actions.Sequence(this.Owner.Actions);
        
        Actions.Property(scaleSeq, @this.Owner.Transform.Scale, this.Owner.Transform.Scale * this.ScaleRatio, this.ScaleSpeed, this.ScaleEase);
        Actions.Call(scaleSeq, this.ScaleDown);
    }
    
    function ScaleDown()
    {
        var scaleSeq = Actions.Sequence(this.Owner.Actions);
        
        Actions.Property(scaleSeq, @this.Owner.Transform.Scale, this.Owner.Transform.Scale / this.ScaleRatio, this.ScaleSpeed, this.ScaleEase);
        Actions.Call(scaleSeq, this.ResetScale);
        ++this.TimesScaled;
        Actions.Call(scaleSeq, this.PerformScale);
    }
    
    function MoveTo()
    {
        var movSeq = Actions.Sequence(this.Owner.Actions);
        
        Actions.Property(movSeq, @this.Owner.Transform.Translation, 
        Real3(this.Owner.Transform.Translation.X + this.MoveX, this.Owner.Transform.Translation.Y + this.MoveY, this.Owner.Transform.Translation.Z),
        this.MoveSpeed, this.MoveEase);
        Actions.Call(movSeq, this.MoveBack);
    }
    
    function MoveBack()
    {
        var movSeq = Actions.Sequence(this.Owner.Actions);
        
        Actions.Property(movSeq, @this.Owner.Transform.Translation, 
        Real3(this.Owner.Transform.Translation.X - this.MoveX, this.Owner.Transform.Translation.Y - this.MoveY, this.Owner.Transform.Translation.Z),
        this.MoveSpeed, this.MoveEase);

        Actions.Call(movSeq, this.ResetPos);
        ++this.TimesMoved;
        Actions.Call(movSeq, this.PerformMove);

    }

    function ResetPos()
    {
    	this.Owner.Transform.Translation = this.StartPos;
    }

    function ResetScale()
    {
    	this.Owner.Transform.Scale = this.StartScale;
    }
}
