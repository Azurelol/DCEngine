/******************************************************************************/
/*!
\file   Delegate.h
\author Christian Sagel
\par    email: c.sagel\@digipen.edu
\date   9/9/2015
\brief  A delegate is a class that wraps a pointer or reference to an object 
        instance, a member method of that object's class to be called on that
        object instance, and provides a method to trigger that call.
\note   I am too inexperienced a programmer to have been able to come up
        with the implementation on my own. Thus, I researched and ended up
        reading through several implementations until settling on this one:

        http://allenchou.net/2012/04/easy-c-delegates/

        Additionally, the followig articles for more implementation details:
        http://www.codeproject.com/Articles/7150/Member-Function-Pointers-and-the-Fastest-Possible
        http://www.codeproject.com/Articles/11015/The-Impossibly-Fast-C-Delegates
        http://www.codeguru.com/cpp/cpp/cpp_mfc/pointers/article.php/c4135/DELEGATES-and-C.htm

        Recently, I found this one as well:
        http://codereview.stackexchange.com/questions/14730/impossibly-fast-delegate-in-c11

*/
/******************************************************************************/
#pragma once

// Libraries
#include <list> // doubly-linked list

namespace DCEngine {

  // FORWARD DECLARATION
  //class Entity; // Subject
  //class Component; // Observer
  //class Event;

  // Try using an alias declaration
  // using void(Component::*DelegateFctn) = (void);

  //typedef void(Component::*DelegateFn)(void); // dirty

  /**************************************************************************/
  /*!
  \brief The responsibility of the 'Callback' class is to provide an interface
  for a delegate to invoke the underlying function, be it a regular
  function (static function) or a member function associated with a
  poiinter that holds the object address to be used as the value of
  'this' pointer.
  \note  This class will be extended, and two subclasses creating from it,
  one responsible for static function callbacks, and another for member
  function callbacks.
  */
  /**************************************************************************/
  template <typename Ret, typename Arg0>
  class Callback {
  public:

    /**************************************************************************/
    /*!
    \brief
    \param The type of the one parameter passed  to the function.
    \return The 'Ret' type is the return type of the function.
    */
    /**************************************************************************/
    virtual Ret invoke(Arg0 param0) = 0;
  };

  /**************************************************************************/
  /*!
  \brief
  \note  Static function callbacks are easy to implement, where all you have
  to do is declare an appropiate function pointer and invoke it using
  the function pointer invocation syntax.
  */
  /**************************************************************************/
  template <typename Ret, typename Arg0>
  class StaticFunctionCallback : public Callback<Ret, Arg0> {

  public:
    StaticFunctionCallback(Ret(*func)(Arg0))
      : func_(func) {
    }

    virtual Ret invoke(Arg0 arg0) {
      return (*func_)(arg0);
    }

  private:
    Ret(*func_)(Arg0);
  };

  /**************************************************************************/
  /*!
  \brief
  \note  Member function (method) callbacks require just a little more work,
  where we have to keep track of which object address to use for 'this'
  pointer while invoking the method.

  The template type 'Method' is used to handle all possible member
  function types, thus it is not type-safe. A non-type template
  parameter like Ret(T::*method)(Param0) could have been used and
  taken extra care of it, like in the aforementioned articles.
  */
  /**************************************************************************/
  template <typename Ret, typename Arg0, typename T, typename Method>
  class MethodCallback : public Callback<Ret, Arg0> {

  public:
    MethodCallback(void *object, Method method)
      : object_(object), method_(method) {
    }
    virtual Ret invoke(Arg0 arg0) {
      T* obj = static_cast<T*><object_>;
      return (obj->*method_)(arg0);
    }

  private:
    void *object_;
    Method method_;

  };


  template <typename Ret, typename Arg0>
  class Delegate {

  public:
    Delegate(Ret (*func)(Arg0))
    : callback_*(new StaticFunctionCallback<Ret, Arg0>(func)) {}

    template <typename T, typename Method>
    Delegate(T* object, Method method)
      : callback_(new MethodCallback<Ret, Arg0, T, Method>(object, method))
     {}

    ~Delegate(void) { delete callback_; }

    Ret operator()(Arg0 arg0) {
      return callback_->invoke(arg0);
    }

  private:
    Callback<Ret, Arg0> *callback_;

  //public:
  //  Delegate(Component* component, DelegateFn function);
  //  ~Delegate() {};
  //  
  //private:
  //  Entity* _subject;
  //  Component* _observer;
  //  DelegateFn _function;

  //  // Double-linked lists for subject, observer ptrs
  //  std::list<Delegate> _subjectList;
  //  std::list<Delegate> _observerList;

  }; // class Delegate

}