/******************************************************************************/
/*!
@file   Sprite.cpp
@author Chen Shu, Christian Sagel
@par    email: c.sagel\@digipen.edu
@date   11/11/2015
@brief  The Sprite component allows the graphical representation of this object
in the world space through the drawing of sprites.

@copyright Copyright 2015, DigiPen Institute of Technology. All rights reserved.
*/
/******************************************************************************/

#include "Sprite.h"
#include "EngineReference.h"
#include <GLM\gtc\matrix_transform.hpp>
#include "../Engine/Engine.h"
#include "../Systems/Content/Content.h"
#include "../Systems/Graphics/GraphicsGL.h"
#include "../Debug/DebugGraphics.h"

namespace DCEngine {
  namespace Components
  {
<<<<<<< HEAD
		ShaderPtr Sprite::mShader;
		GLuint Sprite::mVAO;
=======
>>>>>>> c64b1113efd9df60bcbabd9cd2f4d24e0bb32b20
    DCE_COMPONENT_DEFINE_DEPENDENCIES(Sprite, "Transform", "BoxCollider");
    
    /**************************************************************************/
    /*!
    @brief Provides the definition of this class to Zilch.
    @note This can only go in the translational unit (.cpp)
    */
    /**************************************************************************/
    #if(DCE_USE_ZILCH_INTERNAL_BINDING)
    ZilchDefineType(Sprite, "Sprite", DCEngineCore, builder, type) {
      DCE_BINDING_PROPERTY_DEFINE_UNSIGNED;
      DCE_BINDING_DEFINE_RESOURCE_ATTRIBUTE(SpriteSource);
      // Constructor / Destructor
      DCE_BINDING_COMPONENT_DEFINE_CONSTRUCTOR(Sprite);
      // Properties
      DCE_BINDING_DEFINE_PROPERTY(Sprite, Visible);
      DCE_BINDING_DEFINE_PROPERTY(Sprite, Color);
      DCE_BINDING_DEFINE_PROPERTY(Sprite, SpriteSource);
      DCE_BINDING_PROPERTY_SET_RESOURCE_ATTRIBUTE(propertySpriteSource, attributeSpriteSource);
      DCE_BINDING_DEFINE_PROPERTY(Sprite, FlipX);
      DCE_BINDING_DEFINE_PROPERTY(Sprite, FlipY);
      DCE_BINDING_DEFINE_PROPERTY(Sprite, AnimationActive);
      DCE_BINDING_DEFINE_PROPERTY(Sprite, AnimationSpeed);
			DCE_BINDING_DEFINE_PROPERTY(Sprite, DrawLayer);
      DCE_BINDING_PROPERTY_SET_UNSIGNED(propertyDrawLayer);
    }
    #endif

    /**************************************************************************/
    /*!
    \fn DCEngine::Sprite::Sprite(Entity& owner)

    \brief Default constructor for the Sprite component.

    \param owner
      The owner of sprite.

    \return
      None.
    */
    /**************************************************************************/
    Sprite::Sprite(Entity& owner) : Graphical(std::string("Sprite"), owner), DrawLayer(0) {
      // Register this component to the GraphicsSpace so that it can be drawn
      // by the graphics system.
      Register();
    }

    /**************************************************************************/
    /*!
    \fn DCEngine::Sprite::~Sprite()

    \brief Sprite Destructor.

    \return
      None.
    */
    /**************************************************************************/
    Sprite::~Sprite()
    {
      // Deregister this component from the GraphicsSpace
			SpaceRef->getComponent<GraphicsSpace>()->RemoveGraphicsComponent(this);
    }

    /**************************************************************************/
    /*!
    \fn void DCEngine::Sprite::Initialize()

    \brief Initializes the Sprite component, registering it into the graphics
           space for drawing and initializing with a default SpriteSource.

    \return
      None.
    */
    /**************************************************************************/
    void Sprite::Initialize() {
      if (DCE_TRACE_COMPONENT_INITIALIZE)
        DCTrace << Owner()->Name() << "::" << ObjectName << "::Initialize\n";


    }

    void Sprite::Register()
    {
      // Store the reference to this owner's Transform component
      TransformComponent = dynamic_cast<GameObject*>(Owner())->getComponent<Components::Transform>();
      // Register
      SpaceRef->getComponent<Components::GraphicsSpace>()->RegisterGraphicsComponent(this);
    }

    /**************************************************************************/
    /*!
    \fn void DCEngine::Sprite::SetColorUsing255(Vec3 newColor)

    \brief Sets the color using 255 as the max instead of 1. Preserves opacity.

    \param newColor
    The color in range 0.0f - 1.0f.

    \return
      None.
    */
    /**************************************************************************/
    void Sprite::SetColorUsing255(Vec3 newColor)
    {
      DCTrace << "Color passed into 255 function = " << newColor.x << " " << newColor.y << " " << newColor.z << ".\n";
      Color = Vec4(newColor.x / 255.0f, newColor.y / 255.0f, newColor.z / 255.0f, Color.w);
      DCTrace << "Color set using 255 function = " << Color.x << " " << Color.y << " " << Color.z << " " << Color.w << ".\n";
    }

		void Sprite::Update(double dt)
		{
			auto spriteSrc = Daisy->getSystem<Systems::Content>()->getSpriteSrc(SpriteSource);
			//Animation update
			mShader->Use();
			mShader->SetInteger("isAnimaitonActivated", 0);
			HaveAnimation = AnimationActive;
			if (HaveAnimation == true)//Check whether it has animation
			{
				if (spriteSrc->ColumnCount == 0 || spriteSrc->RowCount == 0)//Check whether the number of frames if 0
				{
					if (spriteSrc->ColumnCount == 0)
					{
						DCTrace << "GraphicsGL::DrawSprite - Sprite - Animation - Total Column is 0, but still enabled HaveAnimation" << "\n";
					}
					else
					{
						DCTrace << "GraphicsGL::DrawSprite - Sprite - Animation - Total Row is 0, but still enabled HaveAnimation" << "\n";
					}
				}
				else
				{
					if (UpdateAnimationSpeed())//Check whether the animation speed is 0
					{
						if (CheckAnimationIntialized() == false)
						{
							mShader->SetInteger("isAnimaitonActivated", 1);
							mShader->SetFloat("columnLength", (float)1 / spriteSrc->ColumnCount);
							mShader->SetFloat("rowHeight", (float)1 / spriteSrc->RowCount);
							mShader->SetInteger("currentColumn", StartColumn);
							mShader->SetInteger("currentRow", StartRow);
						}
						else
						{
							if (AnimationActive == true)
							{
								IncreaseAnimationCounter(dt);
								if (GetAnimationSpeedFPSCounter() >= GetAnimationSpeedFPS())
								{
									ResetSpeedCounter();
									CurrentColumn++;
									//Check whether it reaches the next line.
									if (CurrentColumn >= Daisy->getSystem<Systems::Content>()->getSpriteSrc(SpriteSource)->ColumnCount)
									{
										CurrentRow++;
										CurrentColumn = 0;
										if (CurrentRow >= Daisy->getSystem<Systems::Content>()->getSpriteSrc(SpriteSource)->RowCount)
										{
											CurrentRow = 0;
										}
									}
									//Check If it is go into void frame
									if ((Daisy->getSystem<Systems::Content>()->getSpriteSrc(SpriteSource)->TotalFrame != 0) &&
										(CurrentColumn + Daisy->getSystem<Systems::Content>()->getSpriteSrc(SpriteSource)->ColumnCount * CurrentRow >= Daisy->getSystem<Systems::Content>()->getSpriteSrc(SpriteSource)->TotalFrame))
									{
										CurrentColumn = 0;
										CurrentRow = 0;
									}
									//Current frame started from 0
								}
							}
							mShader->SetInteger("isAnimaitonActivated", 1);
							mShader->SetFloat("columnLength", (float)1 / spriteSrc->ColumnCount);
							mShader->SetFloat("rowHeight", (float)1 / spriteSrc->RowCount);
							mShader->SetInteger("currentColumn", CurrentColumn);
							mShader->SetInteger("currentRow", CurrentRow);
						}
					}
				}
			}
		}

		void Sprite::Draw(Camera& camera)
		{
			mShader->SetInteger("isTexture", 1);
			//mShader->SetMatrix4("projection", camera.GetProjectionMatrix());
			//mShader->SetMatrix4("view", camera.GetProjectionMatrix());
			//DCTrace << "GraphicsGL::DrawSprite - Drawing " << gameObj.Name() << "\n";
			glEnable(GL_BLEND);
			//glEnable(GL_TEXTURE_2D);
			glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

			// Retrieve the 'SpriteSource' resource from the content system
			auto spriteSrc = Daisy->getSystem<Systems::Content>()->getSpriteSrc(SpriteSource);

			// We use transform data for drawing:
			auto transform = TransformComponent;

			// Create the matrix of the transform
			GLfloat verticesOffset = 0.5f;
			glm::mat4 modelMatrix;

			// Matrices
			modelMatrix = glm::translate(modelMatrix, glm::vec3(transform->Translation.x,
				transform->Translation.y,
				transform->Translation.z));
			if (FlipX == true)
			{
				mShader->SetInteger("flipx", 1);
			}
			else
			{
				mShader->SetInteger("flipx", 0);
			}

			if (FlipY == true)
			{
				mShader->SetInteger("flipy", 1);
			}
			else
			{
				mShader->SetInteger("flipy", 0);
			}
			modelMatrix = glm::rotate(modelMatrix, transform->Rotation.z, glm::vec3(0.0f, 0.0f, 1.0f));
			modelMatrix = glm::rotate(modelMatrix, 0.0f, glm::vec3(0.0f, 0.0f, 1.0f));
			modelMatrix = glm::scale(modelMatrix, glm::vec3(transform->Scale.x,
				transform->Scale.y,
				0.0f));


			// Update the uniforms in the shader to this particular sprite's data 
			mShader->SetMatrix4("model", modelMatrix);
			mShader->SetVector4f("spriteColor", Color);
			mShader->SetFloat("CutMinX", (float)spriteSrc->MinX / spriteSrc->PicWidth);
			mShader->SetFloat("CutMaxX", (float)spriteSrc->MaxX / spriteSrc->PicWidth);
			mShader->SetFloat("CutMinY", (float)spriteSrc->MinY / spriteSrc->PicHeight);
			mShader->SetFloat("CutMaxY", (float)spriteSrc->MaxY / spriteSrc->PicHeight);


			// Set the active texture
			glActiveTexture(GL_TEXTURE0); // Used for 3D???
			spriteSrc->getTexture().Bind();
			//this->SpriteShader->SetInteger("image", spriteSrc->getTexture().TextureID); // WHAT DO?
			glBindVertexArray(mVAO);
			glDrawArrays(GL_TRIANGLES, 0, 6);
			glBindVertexArray(0);

			//DrawArrays(SpriteVAO, 6, GL_TRIANGLES);
		}

		//unsigned Sprite::GetDrawLayer(void)
		//{
		//	return DrawLayer;
		//}

    /**************************************************************************/
    /*!
    \fn void DCEngine::Sprite::UpdateSprite()

    \brief Updates the sprite on every update.

    \return
      None.
    */
    /**************************************************************************/
    void Sprite::UpdateSprite()
    {
     
    }

  }
}
